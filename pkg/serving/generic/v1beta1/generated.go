// Copyright Â© 2019 The Knative Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


// Code generated by go run ./cmd/tools --api v1beta1 --out generated.go --my-package knative.dev/client/pkg/serving/generic/v1beta1 --interface-package knative.dev/client/pkg/serving/generic. DO NOT EDIT.
package v1beta1
import(
	"knative.dev/client/pkg/serving/generic"
	servingv1beta1 "knative.dev/serving/pkg/apis/serving/v1beta1"
	duckv1beta1 "knative.dev/pkg/apis/duck/v1beta1"
	"knative.dev/pkg/apis"
	"k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	corev1 "k8s.io/api/core/v1"
)


type V1beta1Configuration struct {
	*servingv1beta1.Configuration
}
func (r V1beta1Configuration) GetAPIVersion() string {
	return r.APIVersion
}
func (r V1beta1Configuration) SetAPIVersion(o string) {
	r.APIVersion = o
}
func (r V1beta1Configuration) GetAnnotations() map[string]string {
	return r.Annotations
}
func (r V1beta1Configuration) SetAnnotations(o map[string]string) {
	r.Annotations = o
}
func (r V1beta1Configuration) GetClusterName() string {
	return r.ClusterName
}
func (r V1beta1Configuration) SetClusterName(o string) {
	r.ClusterName = o
}
func (r V1beta1Configuration) GetCreationTimestamp() *v1.Time {
	return &r.CreationTimestamp
}
func (r V1beta1Configuration) GetDeletionGracePeriodSeconds() *int64 {
	return r.DeletionGracePeriodSeconds
}
func (r V1beta1Configuration) SetDeletionGracePeriodSeconds(o *int64) {
	r.DeletionGracePeriodSeconds = o
}
func (r V1beta1Configuration) GetDeletionTimestamp() *v1.Time {
	return r.DeletionTimestamp
}
func (r V1beta1Configuration) SetDeletionTimestamp(o *v1.Time) {
	r.DeletionTimestamp = o
}
func (r V1beta1Configuration) GetFinalizers() []string {
	return r.Finalizers
}
func (r V1beta1Configuration) SetFinalizers(o []string) {
	r.Finalizers = o
}
func (r V1beta1Configuration) GetGenerateName() string {
	return r.GenerateName
}
func (r V1beta1Configuration) SetGenerateName(o string) {
	r.GenerateName = o
}
func (r V1beta1Configuration) GetGeneration() int64 {
	return r.Generation
}
func (r V1beta1Configuration) SetGeneration(o int64) {
	r.Generation = o
}
func (r V1beta1Configuration) GetInitializers() *v1.Initializers {
	return r.Initializers
}
func (r V1beta1Configuration) SetInitializers(o *v1.Initializers) {
	r.Initializers = o
}
func (r V1beta1Configuration) GetKind() string {
	return r.Kind
}
func (r V1beta1Configuration) SetKind(o string) {
	r.Kind = o
}
func (r V1beta1Configuration) GetLabels() map[string]string {
	return r.Labels
}
func (r V1beta1Configuration) SetLabels(o map[string]string) {
	r.Labels = o
}
func (r V1beta1Configuration) GetName() string {
	return r.Name
}
func (r V1beta1Configuration) SetName(o string) {
	r.Name = o
}
func (r V1beta1Configuration) GetNamespace() string {
	return r.Namespace
}
func (r V1beta1Configuration) SetNamespace(o string) {
	r.Namespace = o
}
func (r V1beta1Configuration) GetOwnerReferences() []v1.OwnerReference {
	return r.OwnerReferences
}
func (r V1beta1Configuration) SetOwnerReferences(o []v1.OwnerReference) {
	r.OwnerReferences = o
}
func (r V1beta1Configuration) GetResourceVersion() string {
	return r.ResourceVersion
}
func (r V1beta1Configuration) SetResourceVersion(o string) {
	r.ResourceVersion = o
}
func (r V1beta1Configuration) GetSelfLink() string {
	return r.SelfLink
}
func (r V1beta1Configuration) SetSelfLink(o string) {
	r.SelfLink = o
}
func (r V1beta1Configuration) GetSpec() generic.ConfigurationSpec {
	return V1beta1ConfigurationSpec{&r.Spec}
}
func (r V1beta1Configuration) GetStatus() generic.ConfigurationStatus {
	return V1beta1ConfigurationStatus{&r.Status}
}
func (r V1beta1Configuration) GetUID() types.UID {
	return r.UID
}
func (r V1beta1Configuration) SetUID(o types.UID) {
	r.UID = o
}

type V1beta1ConfigurationSpec struct {
	*servingv1beta1.ConfigurationSpec
}
func (r V1beta1ConfigurationSpec) GetTemplate() generic.RevisionTemplateSpec {
	return V1beta1RevisionTemplateSpec{&r.Template}
}

type V1beta1ConfigurationStatus struct {
	*servingv1beta1.ConfigurationStatus
}
func (r V1beta1ConfigurationStatus) GetConditions() []apis.Condition {
	return r.Conditions
}
func (r V1beta1ConfigurationStatus) SetConditions(o []apis.Condition) {
	r.Conditions = o
}
func (r V1beta1ConfigurationStatus) GetLatestCreatedRevisionName() string {
	return r.LatestCreatedRevisionName
}
func (r V1beta1ConfigurationStatus) SetLatestCreatedRevisionName(o string) {
	r.LatestCreatedRevisionName = o
}
func (r V1beta1ConfigurationStatus) GetLatestReadyRevisionName() string {
	return r.LatestReadyRevisionName
}
func (r V1beta1ConfigurationStatus) SetLatestReadyRevisionName(o string) {
	r.LatestReadyRevisionName = o
}
func (r V1beta1ConfigurationStatus) GetObservedGeneration() int64 {
	return r.ObservedGeneration
}
func (r V1beta1ConfigurationStatus) SetObservedGeneration(o int64) {
	r.ObservedGeneration = o
}

type V1beta1Revision struct {
	*servingv1beta1.Revision
}
func (r V1beta1Revision) GetAPIVersion() string {
	return r.APIVersion
}
func (r V1beta1Revision) SetAPIVersion(o string) {
	r.APIVersion = o
}
func (r V1beta1Revision) GetAnnotations() map[string]string {
	return r.Annotations
}
func (r V1beta1Revision) SetAnnotations(o map[string]string) {
	r.Annotations = o
}
func (r V1beta1Revision) GetClusterName() string {
	return r.ClusterName
}
func (r V1beta1Revision) SetClusterName(o string) {
	r.ClusterName = o
}
func (r V1beta1Revision) GetCreationTimestamp() *v1.Time {
	return &r.CreationTimestamp
}
func (r V1beta1Revision) GetDeletionGracePeriodSeconds() *int64 {
	return r.DeletionGracePeriodSeconds
}
func (r V1beta1Revision) SetDeletionGracePeriodSeconds(o *int64) {
	r.DeletionGracePeriodSeconds = o
}
func (r V1beta1Revision) GetDeletionTimestamp() *v1.Time {
	return r.DeletionTimestamp
}
func (r V1beta1Revision) SetDeletionTimestamp(o *v1.Time) {
	r.DeletionTimestamp = o
}
func (r V1beta1Revision) GetFinalizers() []string {
	return r.Finalizers
}
func (r V1beta1Revision) SetFinalizers(o []string) {
	r.Finalizers = o
}
func (r V1beta1Revision) GetGenerateName() string {
	return r.GenerateName
}
func (r V1beta1Revision) SetGenerateName(o string) {
	r.GenerateName = o
}
func (r V1beta1Revision) GetGeneration() int64 {
	return r.Generation
}
func (r V1beta1Revision) SetGeneration(o int64) {
	r.Generation = o
}
func (r V1beta1Revision) GetInitializers() *v1.Initializers {
	return r.Initializers
}
func (r V1beta1Revision) SetInitializers(o *v1.Initializers) {
	r.Initializers = o
}
func (r V1beta1Revision) GetKind() string {
	return r.Kind
}
func (r V1beta1Revision) SetKind(o string) {
	r.Kind = o
}
func (r V1beta1Revision) GetLabels() map[string]string {
	return r.Labels
}
func (r V1beta1Revision) SetLabels(o map[string]string) {
	r.Labels = o
}
func (r V1beta1Revision) GetName() string {
	return r.Name
}
func (r V1beta1Revision) SetName(o string) {
	r.Name = o
}
func (r V1beta1Revision) GetNamespace() string {
	return r.Namespace
}
func (r V1beta1Revision) SetNamespace(o string) {
	r.Namespace = o
}
func (r V1beta1Revision) GetOwnerReferences() []v1.OwnerReference {
	return r.OwnerReferences
}
func (r V1beta1Revision) SetOwnerReferences(o []v1.OwnerReference) {
	r.OwnerReferences = o
}
func (r V1beta1Revision) GetResourceVersion() string {
	return r.ResourceVersion
}
func (r V1beta1Revision) SetResourceVersion(o string) {
	r.ResourceVersion = o
}
func (r V1beta1Revision) GetSelfLink() string {
	return r.SelfLink
}
func (r V1beta1Revision) SetSelfLink(o string) {
	r.SelfLink = o
}
func (r V1beta1Revision) GetSpec() generic.RevisionSpec {
	return V1beta1RevisionSpec{&r.Spec}
}
func (r V1beta1Revision) GetStatus() generic.RevisionStatus {
	return V1beta1RevisionStatus{&r.Status}
}
func (r V1beta1Revision) GetUID() types.UID {
	return r.UID
}
func (r V1beta1Revision) SetUID(o types.UID) {
	r.UID = o
}

type V1beta1RevisionSpec struct {
	*servingv1beta1.RevisionSpec
}
func (r V1beta1RevisionSpec) GetContainerConcurrency() servingv1beta1.RevisionContainerConcurrencyType {
	return r.ContainerConcurrency
}
func (r V1beta1RevisionSpec) SetContainerConcurrency(o servingv1beta1.RevisionContainerConcurrencyType) {
	r.ContainerConcurrency = o
}
func (r V1beta1RevisionSpec) GetContainers() []corev1.Container {
	return r.Containers
}
func (r V1beta1RevisionSpec) SetContainers(o []corev1.Container) {
	r.Containers = o
}
func (r V1beta1RevisionSpec) GetServiceAccountName() string {
	return r.ServiceAccountName
}
func (r V1beta1RevisionSpec) SetServiceAccountName(o string) {
	r.ServiceAccountName = o
}
func (r V1beta1RevisionSpec) GetTimeoutSeconds() *int64 {
	return r.TimeoutSeconds
}
func (r V1beta1RevisionSpec) SetTimeoutSeconds(o *int64) {
	r.TimeoutSeconds = o
}
func (r V1beta1RevisionSpec) GetVolumes() []corev1.Volume {
	return r.Volumes
}
func (r V1beta1RevisionSpec) SetVolumes(o []corev1.Volume) {
	r.Volumes = o
}

type V1beta1RevisionStatus struct {
	*servingv1beta1.RevisionStatus
}
func (r V1beta1RevisionStatus) GetConditions() []apis.Condition {
	return r.Conditions
}
func (r V1beta1RevisionStatus) SetConditions(o []apis.Condition) {
	r.Conditions = o
}
func (r V1beta1RevisionStatus) GetImageDigest() string {
	return r.ImageDigest
}
func (r V1beta1RevisionStatus) SetImageDigest(o string) {
	r.ImageDigest = o
}
func (r V1beta1RevisionStatus) GetLogURL() string {
	return r.LogURL
}
func (r V1beta1RevisionStatus) SetLogURL(o string) {
	r.LogURL = o
}
func (r V1beta1RevisionStatus) GetObservedGeneration() int64 {
	return r.ObservedGeneration
}
func (r V1beta1RevisionStatus) SetObservedGeneration(o int64) {
	r.ObservedGeneration = o
}
func (r V1beta1RevisionStatus) GetServiceName() string {
	return r.ServiceName
}
func (r V1beta1RevisionStatus) SetServiceName(o string) {
	r.ServiceName = o
}

type V1beta1RevisionTemplateSpec struct {
	*servingv1beta1.RevisionTemplateSpec
}
func (r V1beta1RevisionTemplateSpec) GetAnnotations() map[string]string {
	return r.Annotations
}
func (r V1beta1RevisionTemplateSpec) SetAnnotations(o map[string]string) {
	r.Annotations = o
}
func (r V1beta1RevisionTemplateSpec) GetLabels() map[string]string {
	return r.Labels
}
func (r V1beta1RevisionTemplateSpec) SetLabels(o map[string]string) {
	r.Labels = o
}
func (r V1beta1RevisionTemplateSpec) GetName() string {
	return r.Name
}
func (r V1beta1RevisionTemplateSpec) SetName(o string) {
	r.Name = o
}
func (r V1beta1RevisionTemplateSpec) GetSpec() generic.RevisionSpec {
	return V1beta1RevisionSpec{&r.Spec}
}

type V1beta1Route struct {
	*servingv1beta1.Route
}
func (r V1beta1Route) GetAPIVersion() string {
	return r.APIVersion
}
func (r V1beta1Route) SetAPIVersion(o string) {
	r.APIVersion = o
}
func (r V1beta1Route) GetAnnotations() map[string]string {
	return r.Annotations
}
func (r V1beta1Route) SetAnnotations(o map[string]string) {
	r.Annotations = o
}
func (r V1beta1Route) GetClusterName() string {
	return r.ClusterName
}
func (r V1beta1Route) SetClusterName(o string) {
	r.ClusterName = o
}
func (r V1beta1Route) GetCreationTimestamp() *v1.Time {
	return &r.CreationTimestamp
}
func (r V1beta1Route) GetDeletionGracePeriodSeconds() *int64 {
	return r.DeletionGracePeriodSeconds
}
func (r V1beta1Route) SetDeletionGracePeriodSeconds(o *int64) {
	r.DeletionGracePeriodSeconds = o
}
func (r V1beta1Route) GetDeletionTimestamp() *v1.Time {
	return r.DeletionTimestamp
}
func (r V1beta1Route) SetDeletionTimestamp(o *v1.Time) {
	r.DeletionTimestamp = o
}
func (r V1beta1Route) GetFinalizers() []string {
	return r.Finalizers
}
func (r V1beta1Route) SetFinalizers(o []string) {
	r.Finalizers = o
}
func (r V1beta1Route) GetGenerateName() string {
	return r.GenerateName
}
func (r V1beta1Route) SetGenerateName(o string) {
	r.GenerateName = o
}
func (r V1beta1Route) GetGeneration() int64 {
	return r.Generation
}
func (r V1beta1Route) SetGeneration(o int64) {
	r.Generation = o
}
func (r V1beta1Route) GetInitializers() *v1.Initializers {
	return r.Initializers
}
func (r V1beta1Route) SetInitializers(o *v1.Initializers) {
	r.Initializers = o
}
func (r V1beta1Route) GetKind() string {
	return r.Kind
}
func (r V1beta1Route) SetKind(o string) {
	r.Kind = o
}
func (r V1beta1Route) GetLabels() map[string]string {
	return r.Labels
}
func (r V1beta1Route) SetLabels(o map[string]string) {
	r.Labels = o
}
func (r V1beta1Route) GetName() string {
	return r.Name
}
func (r V1beta1Route) SetName(o string) {
	r.Name = o
}
func (r V1beta1Route) GetNamespace() string {
	return r.Namespace
}
func (r V1beta1Route) SetNamespace(o string) {
	r.Namespace = o
}
func (r V1beta1Route) GetOwnerReferences() []v1.OwnerReference {
	return r.OwnerReferences
}
func (r V1beta1Route) SetOwnerReferences(o []v1.OwnerReference) {
	r.OwnerReferences = o
}
func (r V1beta1Route) GetResourceVersion() string {
	return r.ResourceVersion
}
func (r V1beta1Route) SetResourceVersion(o string) {
	r.ResourceVersion = o
}
func (r V1beta1Route) GetSelfLink() string {
	return r.SelfLink
}
func (r V1beta1Route) SetSelfLink(o string) {
	r.SelfLink = o
}
func (r V1beta1Route) GetSpec() generic.RouteSpec {
	return V1beta1RouteSpec{&r.Spec}
}
func (r V1beta1Route) GetStatus() generic.RouteStatus {
	return V1beta1RouteStatus{&r.Status}
}
func (r V1beta1Route) GetUID() types.UID {
	return r.UID
}
func (r V1beta1Route) SetUID(o types.UID) {
	r.UID = o
}

type V1beta1RouteSpec struct {
	*servingv1beta1.RouteSpec
}
func (r V1beta1RouteSpec) GetTraffic() generic.TrafficTargetSlice {
	return V1beta1TrafficTargetSlice{r.Traffic}
}
func (r V1beta1RouteSpec) SetTraffic(o generic.TrafficTargetSlice) {
	r.Traffic = o.(V1beta1TrafficTargetSlice).Elts
}

type V1beta1RouteStatus struct {
	*servingv1beta1.RouteStatus
}
func (r V1beta1RouteStatus) GetAddress() *duckv1beta1.Addressable {
	return r.Address
}
func (r V1beta1RouteStatus) SetAddress(o *duckv1beta1.Addressable) {
	r.Address = o
}
func (r V1beta1RouteStatus) GetConditions() []apis.Condition {
	return r.Conditions
}
func (r V1beta1RouteStatus) SetConditions(o []apis.Condition) {
	r.Conditions = o
}
func (r V1beta1RouteStatus) GetObservedGeneration() int64 {
	return r.ObservedGeneration
}
func (r V1beta1RouteStatus) SetObservedGeneration(o int64) {
	r.ObservedGeneration = o
}
func (r V1beta1RouteStatus) GetTraffic() generic.TrafficTargetSlice {
	return V1beta1TrafficTargetSlice{r.Traffic}
}
func (r V1beta1RouteStatus) SetTraffic(o generic.TrafficTargetSlice) {
	r.Traffic = o.(V1beta1TrafficTargetSlice).Elts
}
func (r V1beta1RouteStatus) GetURL() *apis.URL {
	return r.URL
}
func (r V1beta1RouteStatus) SetURL(o *apis.URL) {
	r.URL = o
}

type V1beta1Service struct {
	*servingv1beta1.Service
}
func (r V1beta1Service) GetAPIVersion() string {
	return r.APIVersion
}
func (r V1beta1Service) SetAPIVersion(o string) {
	r.APIVersion = o
}
func (r V1beta1Service) GetAnnotations() map[string]string {
	return r.Annotations
}
func (r V1beta1Service) SetAnnotations(o map[string]string) {
	r.Annotations = o
}
func (r V1beta1Service) GetClusterName() string {
	return r.ClusterName
}
func (r V1beta1Service) SetClusterName(o string) {
	r.ClusterName = o
}
func (r V1beta1Service) GetCreationTimestamp() *v1.Time {
	return &r.CreationTimestamp
}
func (r V1beta1Service) GetDeletionGracePeriodSeconds() *int64 {
	return r.DeletionGracePeriodSeconds
}
func (r V1beta1Service) SetDeletionGracePeriodSeconds(o *int64) {
	r.DeletionGracePeriodSeconds = o
}
func (r V1beta1Service) GetDeletionTimestamp() *v1.Time {
	return r.DeletionTimestamp
}
func (r V1beta1Service) SetDeletionTimestamp(o *v1.Time) {
	r.DeletionTimestamp = o
}
func (r V1beta1Service) GetFinalizers() []string {
	return r.Finalizers
}
func (r V1beta1Service) SetFinalizers(o []string) {
	r.Finalizers = o
}
func (r V1beta1Service) GetGenerateName() string {
	return r.GenerateName
}
func (r V1beta1Service) SetGenerateName(o string) {
	r.GenerateName = o
}
func (r V1beta1Service) GetGeneration() int64 {
	return r.Generation
}
func (r V1beta1Service) SetGeneration(o int64) {
	r.Generation = o
}
func (r V1beta1Service) GetInitializers() *v1.Initializers {
	return r.Initializers
}
func (r V1beta1Service) SetInitializers(o *v1.Initializers) {
	r.Initializers = o
}
func (r V1beta1Service) GetKind() string {
	return r.Kind
}
func (r V1beta1Service) SetKind(o string) {
	r.Kind = o
}
func (r V1beta1Service) GetLabels() map[string]string {
	return r.Labels
}
func (r V1beta1Service) SetLabels(o map[string]string) {
	r.Labels = o
}
func (r V1beta1Service) GetName() string {
	return r.Name
}
func (r V1beta1Service) SetName(o string) {
	r.Name = o
}
func (r V1beta1Service) GetNamespace() string {
	return r.Namespace
}
func (r V1beta1Service) SetNamespace(o string) {
	r.Namespace = o
}
func (r V1beta1Service) GetOwnerReferences() []v1.OwnerReference {
	return r.OwnerReferences
}
func (r V1beta1Service) SetOwnerReferences(o []v1.OwnerReference) {
	r.OwnerReferences = o
}
func (r V1beta1Service) GetResourceVersion() string {
	return r.ResourceVersion
}
func (r V1beta1Service) SetResourceVersion(o string) {
	r.ResourceVersion = o
}
func (r V1beta1Service) GetSelfLink() string {
	return r.SelfLink
}
func (r V1beta1Service) SetSelfLink(o string) {
	r.SelfLink = o
}
func (r V1beta1Service) GetSpec() generic.ServiceSpec {
	return V1beta1ServiceSpec{&r.Spec}
}
func (r V1beta1Service) GetStatus() generic.ServiceStatus {
	return V1beta1ServiceStatus{&r.Status}
}
func (r V1beta1Service) GetUID() types.UID {
	return r.UID
}
func (r V1beta1Service) SetUID(o types.UID) {
	r.UID = o
}

type V1beta1ServiceSpec struct {
	*servingv1beta1.ServiceSpec
}
func (r V1beta1ServiceSpec) GetTemplate() generic.RevisionTemplateSpec {
	return V1beta1RevisionTemplateSpec{&r.Template}
}
func (r V1beta1ServiceSpec) GetTraffic() generic.TrafficTargetSlice {
	return V1beta1TrafficTargetSlice{r.Traffic}
}
func (r V1beta1ServiceSpec) SetTraffic(o generic.TrafficTargetSlice) {
	r.Traffic = o.(V1beta1TrafficTargetSlice).Elts
}

type V1beta1ServiceStatus struct {
	*servingv1beta1.ServiceStatus
}
func (r V1beta1ServiceStatus) GetAddress() *duckv1beta1.Addressable {
	return r.Address
}
func (r V1beta1ServiceStatus) SetAddress(o *duckv1beta1.Addressable) {
	r.Address = o
}
func (r V1beta1ServiceStatus) GetConditions() []apis.Condition {
	return r.Conditions
}
func (r V1beta1ServiceStatus) SetConditions(o []apis.Condition) {
	r.Conditions = o
}
func (r V1beta1ServiceStatus) GetLatestCreatedRevisionName() string {
	return r.LatestCreatedRevisionName
}
func (r V1beta1ServiceStatus) SetLatestCreatedRevisionName(o string) {
	r.LatestCreatedRevisionName = o
}
func (r V1beta1ServiceStatus) GetLatestReadyRevisionName() string {
	return r.LatestReadyRevisionName
}
func (r V1beta1ServiceStatus) SetLatestReadyRevisionName(o string) {
	r.LatestReadyRevisionName = o
}
func (r V1beta1ServiceStatus) GetObservedGeneration() int64 {
	return r.ObservedGeneration
}
func (r V1beta1ServiceStatus) SetObservedGeneration(o int64) {
	r.ObservedGeneration = o
}
func (r V1beta1ServiceStatus) GetTraffic() generic.TrafficTargetSlice {
	return V1beta1TrafficTargetSlice{r.Traffic}
}
func (r V1beta1ServiceStatus) SetTraffic(o generic.TrafficTargetSlice) {
	r.Traffic = o.(V1beta1TrafficTargetSlice).Elts
}
func (r V1beta1ServiceStatus) GetURL() *apis.URL {
	return r.URL
}
func (r V1beta1ServiceStatus) SetURL(o *apis.URL) {
	r.URL = o
}

type V1beta1TrafficTarget struct {
	*servingv1beta1.TrafficTarget
}
func (r V1beta1TrafficTarget) GetConfigurationName() string {
	return r.ConfigurationName
}
func (r V1beta1TrafficTarget) SetConfigurationName(o string) {
	r.ConfigurationName = o
}
func (r V1beta1TrafficTarget) GetLatestRevision() *bool {
	return r.LatestRevision
}
func (r V1beta1TrafficTarget) SetLatestRevision(o *bool) {
	r.LatestRevision = o
}
func (r V1beta1TrafficTarget) GetPercent() int {
	return r.Percent
}
func (r V1beta1TrafficTarget) SetPercent(o int) {
	r.Percent = o
}
func (r V1beta1TrafficTarget) GetRevisionName() string {
	return r.RevisionName
}
func (r V1beta1TrafficTarget) SetRevisionName(o string) {
	r.RevisionName = o
}
func (r V1beta1TrafficTarget) GetTag() string {
	return r.Tag
}
func (r V1beta1TrafficTarget) SetTag(o string) {
	r.Tag = o
}
func (r V1beta1TrafficTarget) GetURL() *apis.URL {
	return r.URL
}
func (r V1beta1TrafficTarget) SetURL(o *apis.URL) {
	r.URL = o
}

type V1beta1TrafficTargetSlice struct {
	Elts []servingv1beta1.TrafficTarget
}
func (s V1beta1TrafficTargetSlice) Iter() chan generic.TrafficTarget {
	ret := make(chan generic.TrafficTarget, len(s.Elts))
	for _, elt := range s.Elts {
	    ret <- V1beta1TrafficTarget{&elt}
	}
	close(ret)
	return ret
}
func (s V1beta1TrafficTargetSlice) Index(latestrevision *bool, revisionname string, tag string) int {
	for i, elt := range s.Elts {
	    var v bool
	    if elt.LatestRevision != nil {
	        v = *elt.LatestRevision
	    } else if latestrevision != nil {
	        continue
	    }
	    if v != *latestrevision { continue }
	    if elt.RevisionName != revisionname { continue }
	    if elt.Tag != tag { continue }
	    return i
	}
	return -1
}
func (s V1beta1TrafficTargetSlice) Get(i int) generic.TrafficTarget {
	return V1beta1TrafficTarget{&s.Elts[i]}
}
func (s V1beta1TrafficTargetSlice) Find(latestrevision *bool, revisionname string, tag string)(generic.TrafficTarget, bool) {
	i := s.Index(latestrevision, revisionname, tag)
	if i < 0 {
	    return V1beta1TrafficTarget{nil}, false
	}
	return s.Get(i), true
}
func (s V1beta1TrafficTargetSlice) Filter(predicate func (e generic.TrafficTarget) bool) generic.TrafficTargetSlice {
	ret := []servingv1beta1.TrafficTarget{}
	for _, elt := range s.Elts {
	    if predicate(V1beta1TrafficTarget{&elt}) {
	        ret = append(ret, elt)
	    }
	}
	return V1beta1TrafficTargetSlice{ret}
}
func (s V1beta1TrafficTargetSlice) Upsert(configurationname string, latestrevision *bool, percent int, revisionname string, tag string, url *apis.URL) generic.TrafficTarget {
	ins := servingv1beta1.TrafficTarget{ configurationname, latestrevision, percent, revisionname, tag, url }
	idx := s.Index(latestrevision, revisionname, tag)
	if idx >= 0 {
	    s.Elts[idx] = ins
	} else {
	    idx = len(s.Elts)
	    s.Elts = append(s.Elts, ins)
	}
	return V1beta1TrafficTarget{&s.Elts[idx]}
}
